/**
ALU (Arithmetic Logic Unit):

    Computes out one of the following functions
    on the 16-bit inputs x, y
    according to the input bits zx, nx, zy, ny, f, no:

                0, 1, -1,
                x, y, !x, !y, -x, -y,
                x + 1, y + 1, x - 1, y - 1,
                x + y, x - y, y - x,
                x & y, x | y

    In addition, computes the two output bits zr, ng:

        if (out == 0) zr = 1, else zr = 0
        if (out < 0)  ng = 1, else ng = 0

    It manipulates the x and y inputs
    and operates on the resulting values as follows:

        if (zx == 1) sets x = 0        // 16-bit constant
        if (nx == 1) sets x = !x       // bitwise not
        if (zy == 1) sets y = 0        // 16-bit constant
        if (ny == 1) sets y = !y       // bitwise not
        if (f == 1)  sets out = x + y  // integer 2's complement addition
        if (f == 0)  sets out = x & y  // bitwise and
        if (no == 1) sets out = !out   // bitwise not
*/

CHIP ALU {

    IN  
        x[16], y[16],   // 16-bit inputs        
        zx,             // zero the x input?
        nx,             // negate the x input?
        zy,             // zero the y input?
        ny,             // negate the y input?
        f,              // compute (out = x + y) or (out = x & y)?
        no;             // negate the out output?
    OUT 
        out[16],        // 16-bit output
        zr,             // if (out == 0) equals 1, else 0
        ng;             // if (out < 0)  equals 1, else 0

    PARTS:
    // Implementation_#1:

/** zx, nx */

    // Zero de input if zx = 1
    Mux16 (a = x, b = false, sel = zx, out = zerox);

    // Negate the result
    Not16 (in = zerox, out = notx);

    // Choose the negated result if nx = 1
    Mux16 (a = zerox, b = notx, sel = nx, out = inputx);

/** zy, ny */

    // Zero de input if zy = 1
    Mux16 (a = y, b = false, sel = zy, out = zeroy);

    // Negate the result
    Not16 (in = zeroy, out = noty);

    // Choose the negated result if ny = 1
    Mux16 (a = zeroy, b = noty, sel = ny, out = inputy);

/** f */

    // Calculate both functions' result
    Add16 (a = inputx, b = inputy, out = addxy);
    And16 (a = inputx, b = inputy, out = andxy);

    // Choose between them
    Mux16 (a = andxy, b = addxy, sel = f, out = fxy);

/** no, ng */

    // Negate the output
    Not16 (in = fxy, out = notfxy);

    // Choose the negated result if no = 1
    Mux16 (a = fxy, b = notfxy, sel = no, out = out,
    out[0..7] = out0to7, out[8..15] = out8to15, out[15] = ng); // STORE relevant values for zr and ng

/** zr */

    // Calculating "out[0] OR out[1] OR ... OR out[15]" gives 0 only if all 16 bits are False
    Or8Way (in = out0to7, out = zr1);
    Or8Way (in = out8to15, out = zr2);
    Or (a = zr1, b = zr2, out = notzr);

    // Negate the result to have zr = 1 when all outputs' 16 bits are False
    Not (in = notzr, out = zr);

}