
/** Computes the sum of three bits. */

CHIP FullAdder {

    IN a, b, c;  // 1-bit inputs
    OUT sum,
        carry;

    PARTS:
    // Implementation_#1:

    // The "sum" of two bits keeps being Xor
    //  so for total "sum" we Xor the result with the other input
    Xor (a = a, b = b, out = sumab);
    Xor (a = sumab, b = c, out = sum);
    
    // The "carry" will still be 1 if at least two inputs are 1
    And (a = a, b = b, out = carryab);
    And (a = b, b = c, out = carrybc);
    And (a = c, b = a, out = carryca);

    Or (a = carryab, b = carrybc, out = carryabOrcarrybc);
    Or (a = carryabOrcarrybc, b = carryca, out = carry);

/**
    // Implementation_#2:

    HalfAdder (a = a, b = b, sum = sumab, carry = carryab);
    HalfAdder (a = sumab, b = c, sum = sum, carry = temp);
    Or (a = temp, b = carryab, out = carry);
*/

/**
    // HalfAdder Implementation_#1:

        IN a, b;
        OUT sum,
            carry;

    // The "sum" column of the Truth Table happens to be as the Xor gate
    Xor (a = a, b = b, out = sum);

    // The "carry" column of the Truth Table happens to be as the And gate
    And (a = a, b = b, out = carry);
*/

}